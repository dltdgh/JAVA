package com.bbs;


import java.sql.*;

public class DB {
	public static Connection getConnection(){
		Connection conn = null;
		try {
			Class.forName("com.mysql.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/bbs?user=root&password=1234");
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return conn;
	}
	
	public static Statement getStatement(Connection conn){
		Statement stmt = null;
		try {
			if(conn != null){
				stmt = conn.createStatement();
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return stmt;
	}
	
	public static ResultSet excuteQuery(Connection conn, String sql){
		Statement stmt = getStatement(conn);
		return excuteQuery(stmt, sql);
	}
	
	public static void close(Connection conn){
		try {
			if(conn != null){
				conn.close();
				conn = null;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	public static void close(Statement stmt){
		try {
			if(stmt != null){
				stmt.close();
				stmt = null;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	public static void close(ResultSet rs){
		try {
			if(rs != null){
				rs.close();
				rs = null;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	public static ResultSet getRsFromPId(Statement stmt, int id){
		String sql = "select * from article where pid = " + id;
		ResultSet rs = DB.excuteQuery(stmt, sql);
		return rs;
	}
	
	public static ResultSet getRsFromId(Statement stmt, int id){
		String sql = "select * from article where id = " + id;		
		ResultSet rs = DB.excuteQuery(stmt, sql);
		return rs;
	}
	
	public static PreparedStatement getPreparedStatement(Connection conn, String sql){
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return pstmt;
	}
	
	public static PreparedStatement getPreparedStatement(Connection conn, String sql, int autoGeneratedKeys){
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return pstmt;
	}
	
	public static int getReplyNumber(Statement stmt, int pId){
		int number = 0;
		try {
			ResultSet Rs = DB.getRsFromPId(stmt, pId);
			Rs.last();
			number = Rs.getRow();
			Rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return number;
	}
	
	public static int excuteUpdate(Statement stmt, String sql){
		int ret = 0;;
		try {
			ret = stmt.executeUpdate(sql);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ret;
	}
	
	public static int excuteUpdate(Connection conn, String sql){
		int ret = 0;
		Statement stmt = null;
		try {
			stmt = getStatement(conn);
			ret = excuteUpdate(stmt, sql);
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			close(stmt);
		}
		return ret;
	}
	
	public static ResultSet excuteQuery(Statement stmt, String sql){
		ResultSet rs = null;
		try {
			rs = stmt.executeQuery(sql);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return rs;
	}
	
	public static User getUserById(int id){
		User user = new User();
		Connection conn = getConnection();
		Statement stmt = getStatement(conn);
		ResultSet rs = excuteQuery(stmt, "select * from user where userid="+id);
		try{
			rs.next();
			user.initByRs(rs);
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			close(rs);
			close(stmt);
			close(conn);
		}
		return user;
	}
	
	public static Article getArticleById(int id){
		Article article = new Article();
		Connection conn = getConnection();
		Statement stmt = getStatement(conn);
		ResultSet rs = excuteQuery(stmt, "select * from article where id="+id);
		try{
			rs.next();
			article.initFromRs(rs);
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			close(rs);
			close(stmt);
			close(conn);
		}
		return article;
	}
}
